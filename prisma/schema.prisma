generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int    @id @default(autoincrement())
  email             String?   @unique
  emailVerified     DateTime?
  password          String?
  lastPlayedKingdom Int?
  players           Player[] @relation("UserPlayers")
}

model Kingdom {
  id          Int    @id @default(autoincrement())
  name        String    @unique
  maxPlayers  Int       @default(50)
  createdAt   DateTime  @default(now())
  players     Player[]
  chatRooms   ChatRoom[]
  alliances   Alliance[]
}

model Alliance {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  kingdomId   Int      // Alliance belongs to a specific kingdom
  leaderId    Int      // Player ID of alliance leader
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  kingdom     Kingdom  @relation(fields: [kingdomId], references: [id])
  members     AllianceMember[]
  ledAlliances Player[] @relation("AllianceLeader")
  chatRooms   ChatRoom[]
}

model AllianceMember {
  id          Int      @id @default(autoincrement())
  allianceId  Int
  playerId    Int      @unique  // A player can only be in one alliance
  role        AllianceRole @default(MEMBER)
  joinedAt    DateTime @default(now()) @map("joined_at")
  
  // Relations
  alliance    Alliance @relation(fields: [allianceId], references: [id])
  player      Player   @relation(fields: [playerId], references: [id])
}

model Player {
  id          Int    @id @default(autoincrement())
  userId      Int
  kingdomId   Int
  name        String
  gender      String    // 'male' or 'female'
  avatar      String    // URL to avatar image
  createdAt   DateTime  @default(now())
  lastCity    Int?      @default(0)
  cities      City[]
  playerBuildings PlayerBuilding[]
  playerResearch PlayerResearch[]
  chatMessages ChatMessage[]
  allianceMembership AllianceMember?
  ledAlliances Alliance[] @relation("AllianceLeader")
  kingdom     Kingdom   @relation(fields: [kingdomId], references: [id])
  user        User      @relation("UserPlayers", fields: [userId], references: [id])

  @@unique([userId, kingdomId])
}

model City {
  id          Int    @id @default(autoincrement())
  name        String
  age         Int      @default(1)
  playerId    Int
  mapTileId   Int    @unique
  population  Int       @default(100)
  resources   Json      // Store resources as JSON
  lastResourceGeneration DateTime @default(now()) @map("last_resource_generation")
  createdAt   DateTime  @default(now())
  player      Player    @relation(fields: [playerId], references: [id])
  mapTile     MapTile   @relation(fields: [mapTileId], references: [id])
  playerBuildings PlayerBuilding[]
  playerResearch PlayerResearch[]
}

// Tile type enum for better type safety
enum TileType {
  PLAINS
  FORESTS
  HILLS
  MOUNTAINS
  FOOD
  BARB
  RUINS
  CITY
}

model MapTile {
  id          Int      @id @default(autoincrement())
  kingdomId   Int
  type        TileType // Use enum instead of string
  x           Int
  y           Int
  level       Int
  city        City?    // City that owns this tile (if any)

  @@unique([kingdomId, x, y])
  @@index([kingdomId, x, y]) // Spatial index for efficient viewport queries
  @@index([kingdomId, type]) // Index for filtering by tile type
  @@index([kingdomId, level]) // Index for filtering by level
}

model Research {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(50)
  requirements Json?
  costs       Json?
  description String?  @db.Text
  power       Int      @default(0)
  researchTime  Int    @default(60) @map("research_time")
  baseValue   Int      @default(0) @map("base_value")
  bonusValue  Int      @default(0) @map("bonus_value")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  playerResearch PlayerResearch[]
}

model Building {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  fieldType   Int      @default(0) @map("field_type") // 0 = building, 1 = resource field
  description String?  @db.Text
  costs       Json?
  requirements Json?
  slug        String   @unique @db.VarChar(50)
  power       Int      @default(0)
  baseValue   Int      @default(0) @map("base_value")
  bonusValue  Int      @default(0) @map("bonus_value")
  constructionTime Int @default(60) @map("construction_time") // Base construction time in seconds
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  playerBuildings PlayerBuilding[]
}

model PlayerBuilding {
  id          Int      @id @default(autoincrement())
  playerId    Int
  buildingId  Int
  cityId      Int
  plotId      String?  @map("plot_id")
  level       Int      @default(1)
  isConstructing Boolean @default(false) @map("is_constructing")
  constructionStartedAt DateTime? @map("construction_started_at")
  constructionEndsAt DateTime? @map("construction_ends_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  player      Player    @relation(fields: [playerId], references: [id])
  building    Building  @relation(fields: [buildingId], references: [id])
  city        City      @relation(fields: [cityId], references: [id])

  @@unique([cityId, plotId])
  @@index([cityId, plotId])
}

model PlayerResearch {
  id          Int     @id @default(autoincrement())
  playerId    Int
  researchId  Int
  cityId      Int
  level       Int     @default(1)
  isResearching Boolean @default(false) @map("is_researching")
  researchStartedAt DateTime? @map("research_started_at")
  researchEndsAt DateTime? @map("research_ends_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt  @map("updated_at")

  player      Player    @relation(fields: [playerId], references: [id])
  research    Research  @relation(fields: [researchId], references: [id])
  city        City      @relation(fields: [cityId], references: [id])

  @@unique([playerId, researchId, cityId])
}

// Chat models
model ChatRoom {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  type        ChatRoomType
  kingdomId   Int?
  allianceId  Int?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  kingdom     Kingdom?   @relation(fields: [kingdomId], references: [id])
  alliance    Alliance?  @relation(fields: [allianceId], references: [id])
  messages    ChatMessage[]
}

model ChatMessage {
  id          Int      @id @default(autoincrement())
  roomId      Int
  playerId    Int
  content     String   @db.Text
  messageType MessageType @default(TEXT) @map("message_type")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  room        ChatRoom  @relation(fields: [roomId], references: [id])
  player      Player    @relation(fields: [playerId], references: [id])

  @@index([roomId, createdAt])
}

// Enums
enum ChatRoomType {
  GLOBAL
  ALLIANCE
  KINGDOM
  PRIVATE
}

enum MessageType {
  TEXT
  SYSTEM
  TRADE
  ALLIANCE
}

enum AllianceRole {
  LEADER
  OFFICER
  MEMBER
}
